import unittest
import os
import sys
from pathlib import Path
WEEK2_DIR = str(Path(__file__).resolve().parents[1])
sys.path.insert(1, WEEK2_DIR)

from string_spelled_by_gapped_patterns import stringSpelledByGappedPatterns
DATASET_DIR = os.path.join(os.getcwd(), 'datasets/string_spelled_by_gapped_patterns')

class TestStringSpelledByGappedPatterns(unittest.TestCase) :
    def read_input_data(self, in_data_path):
        # Read from dataset file
        with open(in_data_path, 'r') as f :
            k, d = f.readline().strip().split(" ")
            contents = f.readlines()
            paired_reads = []

        for _ in contents :
            reads = _.split("|")
            read1 = reads[0].strip()
            read2 = reads[1].strip()
            paired_reads.append([read1, read2])
        
        return k, d, paired_reads


    def test_string_spelled_by_gapped_patterns(self) :
        in_data = DATASET_DIR + "/real_dataset.txt"
        k, d, pr = self.read_input_data(in_data)
        
        full_str = stringSpelledByGappedPatterns(int(k), int(d), pr)
        expected_output = "GTATGTATGAACAGCAAGTCAAGAGGCTCCGGAAGGAATAGCGTGAGTATCAGTCAGCTGTTCCATAATTTCTGACAGGACATCCGCGCCGACCGAGTTCACTCGCATAGACAACTAGGGCAACAAAAATGCCGGTCGGCACGTGCCGCGAAATGTGTGATTTTATCATCGCTCAGGGGTAGCACCGCCGACCGAGTTCACTCGCATAGACAACTAGGGCGCCGACCGAGTTCACTCGCATAGACAACTAGGGCAACAAAAATGCCGGTCAACAAAAAGCCGACCGAGTTCACTCGCATAGACAACTAGGGCAACAAAAATGCCGGTCTGCCGGTCCGGAAATCTCTATAATGCCATTCTATTAGCCAGTATGTTAATCCCGCTTAGCCCCGTTCCGAGCACTTGTATTACGCGTCACACACTAATTATCAATAAGGCGACGGGGAGCCGCGTCTACTTCGAGGGTTTTCGTGGCAGTCTACGTGGCAGGGGTTGGAGCCGGCCGACCGAGTTCACTCGCATAGACAACTAGGGCAACAAAAATGCCGGTCTTAGTTCGACATCCCCCATCCCGCCGACCGAGTTCACTCGCATAGACAACTAGGGCAACAAAAGCCGACCGAGTTCACTCGCGCCGACCGAGTTCACTCGCATAGACAACTAGGGCAACAAAAATGCCGGTCATAGACAACTAGGGCAACAAAAATGCCGGTCATGCCGGTCCTAGCAAAAAGGGGGAAGGAAAGCCGACCGAGTTCACTCGCAGCCGACCGAGGCCGACCGAGTTCACTCGCATAGACAACTAGGGCAACAAAAATGCCGGTCTTCACTCGCCGACCGAGTTCACTCGCATAGACAACTAGGGCAACAAAAATGCCGGTCGCATAGACAACTAGGGCAACAAAAATGCCGGTCTAGACAACTAGGGCAACAAAAATGCCGGTCCGCCGACCGAGTTCACTCGCGCCGACCGAGTTCACTCGCATAGACAACTAGGGCAACAAAAATGCCGGTCATAGCCGACCGAGTTCACTCGCATAGACAACTAGGGCAACAAAAATGCCGGTCGACAACTAGGGCAACAAAAATGCCGGTCATTACAGTAATACTCTGAGCTATGGGGCGCTACCGCGGATGCAGGAGCTCAATGTGGTCGGTAGCGGGACGTCTGAGTGCATTACACAACGCGGTCTTCCAATAACTGGGATACGATCGCGTTTGGTACTACTTCTTTCCAAAGGCTGGTCTGAAATTGGTCGGCAGCTACGACCCGAATCGTAGATAGGCCGACCGAGTTCACTCGCATAGACAACTAGGGCAACAAAAATGCCGGTCTAAACGTTGTAGCTCGAAGGTGGGCAAATCCTATGGTACCCTCTAGCATGACATACCCTCCGGATCCTGTTAACCATTCCTTAAATACCACATTACCCCATCCACAGAGCGCCGACCGAGTTCACTCGCATAGACAACTAGGGCAACAAAAATGCCGGTCTCTCAATCGTTTATACCACTTCGAGGTATGGTGGTCCTGATGCTCGCCAAGATCGAGTTTCGTAACTAGCCGTATCACTTATTCCAGCCCTTCCGTTTGCTAGACGCAGGGCCCAGACGCCGACCGAGTTCACTCGCATAGACAACTAGGGCAACAAAAATGCCGGTCTGACCGCGTTGCCTGTCGGTCTCCGTCTAGCGTTCGCACAAAGCAAAGTGCCGACCGAGTTCACTCGCATAGACAACTAGGGCAACAAAAATGCCGGTCACGGATAATAATCTGCCGACCGAGTTCACTCGCATAGACAACTAGGGCAACAAAAATGCCGGTCGGGGCTAAAGGCTACCAAACGGAGCACCATCAATGTGCATTGATAGGCGCCGCTTTCGCGAACCAGAACTGCTCAGCGCGAGAAATGGCTCTAAGACACAAGGCCCCCAGGTCACTTGCATCTCCACTCCGACCGTTCCCGTTTGTAGACGCAGGTGGTACGGCCAACCACAGT"
        
        self.assertEqual(expected_output, full_str)
        
        #-------------------------------------------------

        in_data = DATASET_DIR + "/sample_dataset.txt"
        k, d, pr = self.read_input_data(in_data)
        
        full_str = stringSpelledByGappedPatterns(int(k), int(d), pr)
        expected_output = "GACCGAGCGCCGGA"
        
        self.assertEqual(expected_output, full_str)


if __name__=="__main__" :
    unittest.main()